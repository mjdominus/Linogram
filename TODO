
* a = b = c;

* param variables

* proper handling of inconsistent equations

o multiplied types

o more tests

* declaration to pause and load a linogram library file

* declaration to require a Perl file

  * not needed; just "require 'blah'" in the __END__ section

*  type name = EXPR
   equivalent to
        type name;
        constraints { name = EXPR; }

* Builtin functions - sin(), cos(), sqrt()

  o "builtin foo;"

o Compilation of types into data-dumper code

o Reorganize modules.  Put Value classes into Value.pm, etc.

o Fix TODO and XXX items

o string constants

o require "foo", "bar", "baz";

o object declarations or "extends" constructions that involve unknown
  types might try to require a .lino file of the same name, and fail
  only if none can be found

o comments

o Test suite should check error output instead of throwing it away

o A bunch of the environment handling would be simplified if an
  environment had a pointer to the next environment to be searched.
  You wouldn't have to explicitly pass around multiple environments or
  to merge new environments into old ones.

o There's an inconsistency in the code in how environments are
  handled.  In some environments, the values are expressions, and in
  others they're value objects, and in others they're ordinary Perl
  scalars.  This is confusing.  Maybe three separate subclasses of a
  single abstract base class?

